import { useEffect, useState } from "react";

import { BrowserRouter, Routes, Route } from "react-router-dom";
import { Overview, Documentation, ChangeLog, Error } from "./pages/supports";
import {
  Avatars,
  Alerts,
  Buttons,
  Charts,
  Tables,
  Fields,
  Headings,
  Colors,
} from "./pages/blocks";
import {
  Ecommerce,
  Analytics,
  CRM,
  ForgotPassword,
  Register,
  Login,
  LoginForgot,
  UserList,
  UserProfile,
  MyAccount,
  ProductList,
  InventoryList,
  ProductView,
  ProductViewItem,
  ProductUpload,
  ProductUploadItem,
  InvoiceList,
  InvoiceDetails,
  OrderList,
  Message,
  Notification,
  BlankPage,
  Settings,
  Customers,
  InventoryLog,
  Logs,
} from "./pages/master";
import axios from "./axios";
import axiosMain from "axios";
import { useSelector, useDispatch } from "react-redux";
import { useLocation, useNavigate, useSearchParams } from "react-router-dom";
// ALERT
import Swal from "sweetalert2/dist/sweetalert2.js";
import "sweetalert2/src/sweetalert2.scss";
import Coupon from "./pages/master/Coupon";

export default function App() {
  const [searchParams, setSearchParams] = useSearchParams();
  const navigate = useNavigate();
  const access = JSON.parse(localStorage.getItem("pos-token"));
  let location = useLocation();
  const [filter, setFilter] = useState("month");
  const dispatch = useDispatch();
  const user = useSelector((state) => state.user);
  const staffs = useSelector((state) => state.staff.staffs);
  const invoices = useSelector((state) => state.invoice.invoices);
  const inventories = useSelector((state) => state.inventory.inventories);
  const menus = useSelector((state) => state.menu.menus);
  const revenues = useSelector((state) => state.revenue.revenues);
  const customers = useSelector((state) => state.customer.customers);
  const coupons = useSelector((state) => state.coupon.coupons);
  const sales = useSelector((state) => state.sale.sales);
  const trendingSales = useSelector((state) => state.sale.trending);
  const today = new Date();
  const months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec",
  ];
  const currentMonth = months[today.getMonth()];
  const currentYear = today.getFullYear();
  const date = `${currentMonth} ${currentYear}`;
  const [rowInvoice, setRowInvoice] = useState(10);
  const [menuId, setMenuId] = useState("");
  const [logs, setLogs] = useState([]);
  const [logDate, setLogDate] = useState("");
  const [currentPageCoupon, setCurrentPageCoupon] = useState(1);
  const [pageCountCoupon, setPageCountCoupon] = useState(0);
  const [currentPageStaff, setCurrentPageStaff] = useState(1);
  const [pageCountStaff, setPageCountStaff] = useState(0);
  const [currentPageInvoice, setCurrentPageInvoice] = useState(1);
  const [pageCountInvoice, setPageCountInvoice] = useState(0);
  const [currentPageLog, setCurrentPageLog] = useState(1);
  const [pageCountLog, setPageCountLog] = useState(0);
  const [currentPageCustomer, setCurrentPageCustomer] = useState(1);
  const [pageCountCustomer, setPageCountCustomer] = useState(0);

  // useEffect(() => {
  //   // Remove token from localStorage in 24 hours
  //   setTimeout(function () {
  //     localStorage.removeItem("pos-token");
  //   }, 24 * 60 * 60 * 1000);
  //   return navigate("/");
  // }, []);

  // LOGOUT A STAFF
  useEffect(() => {
    if (location.pathname.split("/")[1] === "/?logout") {
      const signOut = async () => {
        try {
          const response = await axios.delete("/auth/logout");
          localStorage.removeItem("pos-token");
          return navigate("/");
        } catch (error) {}
      };
      signOut();
    }
  }, [location]);

  // GET ALL STAFFS
  useEffect(() => {
    const getAllStaffs = async () => {
      try {
        const response = await axios.get(
          `/staff/all?page=${currentPageStaff}&size=10`
        );
        setPageCountStaff(response.data.count);
        dispatch({
          type: "GET_STAFFS",
          payload: response.data.data,
        });
      } catch (error) {
        console.log(error);
      }
    };
    getAllStaffs();
  }, [dispatch, currentPageStaff]);

  // GET ALL INVOICES
  useEffect(() => {
    const getAllInvoices = async () => {
      try {
        const response = await axios.get(
          `/sales/invoices?page=${currentPageInvoice}&size=10`
        );
        setPageCountInvoice(response.data.count);
        dispatch({
          type: "GET_INVOICES",
          payload: response.data.data.invoiceList,
        });
      } catch (error) {
        console.log(error);
      }
    };
    getAllInvoices();
  }, [dispatch, currentPageInvoice]);

  // GET ALL INVENTORIES
  useEffect(() => {
    const getAllInvoices = async () => {
      try {
        const response = await axios.get(`/inventory`);
        dispatch({
          type: "GET_INVENTORIES",
          payload: response.data.data,
        });
      } catch (error) {
        console.log(error);
      }
    };
    getAllInvoices();
  }, [dispatch]);

  // GET ALL MENU LISTS
  useEffect(() => {
    const getLists = async () => {
      try {
        if (JSON.parse(localStorage.getItem("pos-menu"))) {
          return dispatch({
            type: "GET_MENUS",
            payload: JSON.parse(localStorage.getItem("pos-menu")),
          });
        } else {
          const response = await axios.get("/menu/list");
          // localStorage.setItem("pos-menus", JSON.stringify(response.data.data))
          return dispatch({
            type: "GET_MENUS",
            payload: response.data.data,
          });
        }
      } catch (error) {
        return dispatch({
          type: "GET_MENUS",
          payload: JSON.parse(localStorage.getItem("pos-menu")),
        });
      }
    };
    getLists();
  }, [dispatch]);

  // GET ALL REVENUES
  useEffect(() => {
    const getLists = async () => {
      try {
        const response = await axios.get("/analytics/revenue");
        dispatch({
          type: "GET_REVENUES",
          payload: response.data.data.sales,
        });
      } catch (error) {
        console.log(error);
      }
    };
    getLists();
  }, [dispatch]);

  // GET ALL SALES
  useEffect(() => {
    const getLists = async () => {
      try {
        const response = await axios.get("/sales");
        dispatch({
          type: "GET_SALES",
          payload: response.data.data.salesList,
        });
      } catch (error) {
        console.log(error);
      }
    };
    getLists();
  }, [dispatch]);

  // GET TRENDING PRODUCT
  useEffect(() => {
    const getLists = async () => {
      try {
        const response = await axios.get(`/analytics/trending/products`);
        dispatch({
          type: "GET_TRENDING",
          payload: response.data.data,
        });
      } catch (error) {
        console.log(error);
      }
    };
    getLists();
  }, [dispatch]);

  const totalCost = sales?.reduce((acc, obj) => acc + obj?.total_price, 0);

  // GET COUPONS
  useEffect(() => {
    const getCoupons = async () => {
      try {
        const response = await axios.get(
          `/coupon?page=${currentPageCoupon}&size=10`
        );
        setPageCountCoupon(response.data.count);
        dispatch({
          type: "GET_COUPONS",
          payload: response.data.data.coupon,
        });
      } catch (error) {}
    };
    getCoupons();
  }, [dispatch, currentPageCoupon]);

  // GET INVENTORIES LOG
  useEffect(() => {
    if (menuId === "all") {
      const allLogs = async () => {
        try {
          const response = await axios.get(
            `/inventory/log?page=${currentPageLog}&size=10`
          );
          setPageCountLog(response.data.count);
          setLogs(response.data.data);
        } catch (error) {}
      };
      allLogs();
    } else {
      const getLogs = async () => {
        try {
          const response = await axios.get(
            `/inventory/log/${menuId}?page=${currentPageLog}&size=10&year=${
              logDate?.split("-")[0] ? logDate?.split("-")[0] : ""
            }&month=${
              logDate?.split("-")[1] === "02"
                ? 1
                : logDate?.split("-")[1]
                ? logDate?.split("-")[1]
                : ""
            }&day=${logDate?.split("-")[2] ? logDate?.split("-")[2] : ""}`
          );
          setPageCountLog(response.data.count);
          setLogs(response.data.data);
        } catch (error) {}
      };
      getLogs();
    }
  }, [menuId, logDate, currentPageLog]);

  // GET USER
  useEffect(() => {
    const getUser = async () => {
      try {
        const response = await axiosMain.get(
          "https://pos-vxbq.onrender.com/api/staff",
          {
            headers: {
              Authorization: `Bearer ${access}`,
            },
          }
        );
        dispatch({
          type: "GET_USER",
          payload: response.data.data,
        });
        // navigate("/dashboard");
      } catch (error) {
        const statusCode = error?.response?.status;
        if (statusCode === 401) {
          localStorage.removeItem("pos-token");
          setTimeout(() => {
            window.location.href = "/";
          }, 3000);
        }
      }
    };
    getUser();
  }, [dispatch, access]);

  // GET STAFF MANAGEMENT
  useEffect(() => {
    const getCustomers = async () => {
      try {
        const response = await axios.get(
          `/user?page=${currentPageCustomer}&size=10`
        );
        setPageCountCustomer(response.data.count);
        dispatch({
          type: "GET_CUSTOMERS",
          payload: response.data.data,
        });
      } catch (error) {}
    };
    getCustomers();
  }, [dispatch, currentPageCustomer]);

  return (
    <Routes>
      {/* master Pages */}
      <Route
        path="/dashboard"
        element={
          <Ecommerce
            staffs={staffs}
            pageCountStaff={pageCountStaff}
            filter={filter}
            setFilter={setFilter}
            invoices={invoices}
            pageCountInvoice={pageCountInvoice}
            menus={menus}
            revenues={revenues}
            sales={totalCost}
            trendingSales={trendingSales}
            logs={logs}
            pageCountLog={pageCountLog}
          />
        }
      />
      <Route path="/" element={<Login />} />
      <Route path="/analytics" element={<Analytics />} />
      <Route path="/crm" element={<CRM />} />
      <Route path="/login-forgot" element={LoginForgot} />
      <Route path="/register" element={<Register />} />
      <Route path="/forgotpassword" element={<ForgotPassword />} />
      <Route
        path="/staff-list"
        element={
          <UserList
            staffs={staffs}
            user={user}
            setCurrentPageStaff={setCurrentPageStaff}
            currentPageStaff={currentPageStaff}
            setPageCountStaff={setPageCountStaff}
            pageCountStaff={pageCountStaff}
          />
        }
      />
      <Route path="/staff-profile/:id" element={<UserProfile />} />
      <Route path="/my-account" element={<MyAccount />} />
      <Route path="/product-list" element={<ProductList menus={menus} />} />
      <Route path="/product-view" element={<ProductView />} />
      <Route path="/food-view/:id" element={<ProductViewItem />} />
      <Route path="/product-upload" element={<ProductUpload />} />
      <Route path="/food-upload/:id" element={<ProductUploadItem />} />
      {/* <Route path="/food-upload/:id" element={<ProductUpload />} /> */}
      <Route
        path="/inventories"
        element={<InventoryList inventories={inventories} menus={menus} />}
      />
      <Route
        path="/logs/:id"
        element={
          <Logs
            logs={logs}
            setLogDate={setLogDate}
            setCurrentPageLog={setCurrentPageLog}
            currentPageLog={currentPageLog}
            setPageCountLog={setPageCountLog}
            pageCountLog={pageCountLog}
            inventories={inventories}
            menus={menus}
            setMenuId={setMenuId}
          />
        }
      />
      <Route
        path="/logs"
        element={
          <InventoryLog
            inventories={inventories}
            menus={menus}
            setMenuId={setMenuId}
          />
        }
      />
      <Route
        path="/invoice-list"
        element={
          <InvoiceList
            invoices={invoices}
            setCurrentPageInvoice={setCurrentPageInvoice}
            currentPageInvoice={currentPageInvoice}
            setPageCountInvoice={setPageCountInvoice}
            pageCountInvoice={pageCountInvoice}
          />
        }
      />
      <Route path="/invoice-details/:id" element={<InvoiceDetails />} />
      <Route
        path="/coupon"
        element={
          <Coupon
            coupons={coupons}
            setCurrentPageCoupon={setCurrentPageCoupon}
            currentPageCoupon={currentPageCoupon}
            setPageCountCoupon={setPageCountCoupon}
            pageCountCoupon={pageCountCoupon}
          />
        }
      />
      <Route path="/order-list" element={<OrderList />} />
      <Route
        path="/customers"
        element={
          <Customers
            customers={customers}
            setCurrentPageCustomer={setCurrentPageCustomer}
            currentPageCustomer={currentPageCustomer}
            setPageCountCustomer={setPageCountCustomer}
            pageCountCustomer={pageCountCustomer}
          />
        }
      />
      <Route path="/message" element={<Message />} />
      <Route path="/notification" element={<Notification />} />
      <Route path="/settings" element={<Settings />} />
      <Route path="/blank-page" element={<BlankPage />} />

      {/* Blocks Pages */}
      <Route path="/headings" element={<Headings />} />
      <Route path="/buttons" element={<Buttons />} />
      <Route path="/avatars" element={<Avatars />} />
      <Route path="/colors" element={<Colors />} />
      <Route path="/charts" element={<Charts />} />
      <Route path="/tables" element={<Tables />} />
      <Route path="/fields" element={<Fields />} />
      <Route path="/alerts" element={<Alerts />} />

      {/* Supports Pages */}
      <Route path="*" element={<Error />} />
      <Route path="/" element={<Login />} />
      <Route path="/documentation" element={<Documentation />} />
      <Route path="/changelog" element={<ChangeLog />} />
    </Routes>
  );
}
